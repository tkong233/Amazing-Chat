swagger: "2.0"
info:
  title: Amazing Chat API
  description: This is the API documentation for our cis557 project -- Amazing Chat
  version: 1.0.0
# host: api.swagger.io
host: localhost:5000
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/users/register:
    post:
      tags:
        - "User"
      summary: Register a new user.
      description: Submits form data from registration page to register user, and then redirects to login page.
      produces:
        - application/json
      parameters:
        - in: body
          name: name, email, password, password2, question, answer
          description: user info needed to register account
          required: true
          schema:
            type: object
            required:
              - name
              - email
              - password
              - password2
              - question
              - answer
            properties:
              name:
                type: string
              email:
                type: string
              password:
                type: string
                format: password
              password2:
                type: string
                format: password
              question:
                type: string
              answer:
                type: string
      responses:
        200:
          description: successfully register
          schema:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              password:
                type: string
              question:
                type: string
              answer:
                type: string
              failed_login_attempts:
                type: integer
              date:
                type: string
                format: date
              _v:
                type: integer
        400:
          description: validation error / Email already exists
  /api/users/login:
    post:
      tags:
        - "User"
      description: Submits form data from login page, authenticates user, and redirects to messaging page.
      produces:
        - application/json
      parameters:
        - in: body
          name: email, password
          description: email and password of the registered user
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: successfully logged in
          schema:
            type: object
            properties:
              success:
                type: boolean
              token:
                type: string
        400:
          description: validation error / account locked out / password incorrect
        404:
          description: Email not found
  /api/users/reset:
    post:
      tags:
        - "User"
      description: Submits form data from reset password page, validate security question, and reset password
      produces:
        - application/json
      parameters:
        - in: body
          name: email, password, password2, question, answer
          description: use security question to set new password
          required: true
          schema:
            type: object
            required:
              - email
              - password
              - password2
              - question
              - answer
            properties:
              name:
                type: string
              email:
                type: string
              password:
                type: string
                format: password
              password2:
                type: string
                format: password
              question:
                type: string
              answer:
                type: string
      responses:
        200:
          description: successfully reset password
          schema:
            type: object
            properties:
              email:
                type: boolean
              password:
                type: string
              question:
                type: string
              answer:
                type: string
        400:
          description: validation error / email is not registered / security question does not match record / answer to secrity question does not match record
  /api/users/upload_profile_image/:{email}:
    post:
      tags:
        - "User"
      description: Upload a profile image from file
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: email
          description: user email
          required: true
          type: string
        - in: formData
          name: file
          description: file to upload
          required: true
          type: file
      responses:
        200:
          description: successfully upload user profile picture
          schema:
            type: object
            properties:
              user:
                type: object
        400:
          description: No file uploaded
        500:
          description: file upload error
        404:
          description: can't find user profile
  /api/users/profile/:{email}:
    delete:
      tags:
        - "User"
      description: deactivate a user account
      produces:
        - application/json
      parameters:
        - in: path
          name: email
          description: user email
          required: true
          type: string
      responses:
        200:
          description: successfully delete user
  /api/users/status/:{email}:
    post:
      tags:
        - "User"
      description: post user status
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: email
          description: user email
          required: true
          type: string
        - in: formData
          name: file
          description: image to upload
          required: false
          type: file
        - in: formData
          name: text
          description: user status text
          required: false
          type: string
      responses:
        200:
          description: successfully add status
          schema:
            type: object
            properties:
              message:
                type: string
        500:
          description: file upload error
        404:
          description: can't find user profile

  /contacts/:{email}:
    get:
      tags:
        - "Contact"
      description: find a list of contacts of the person who is identified by the email
      produces:
        - application/json
      parameters:
        - in: path
          name: email
          description: user email
          required: true
          type: string
      responses:
        200:
          description: successfully found contacts of the user
          schema:
            type: array
            items:
              properties:
                pairId:
                  type: string
                name:
                  type: string
                email:
                  type: string
                profile_picture:
                  type: string
                lastInteractTime:
                  type: string
        404:
          description: user not found

  /contact:
    post:
      tags:
        - "Contact"
      description: create a new contact between two users
      produces:
        - application/json
      parameters:
        - in: body
          name: email1, email2
          description: email1 of the user who initaite the add, email2 of the user who user is going to add
          required: true
          schema:
            type: object
            required:
              - email1
              - email2
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: successfully added contact
          schema:
            type: array
            items:
              properties:
                name:
                  type: string
                profile_picture:
                  type: string
                lastInteractTime:
                  type: string
        400:
          description: contact already exists
        404:
          description: user not found
    delete:
      tags:
        - "Contact"
      description: delete contact between both users
      produces:
        - application/json
      parameters:
        - in: body
          name: email1, email2
          description: email1 of the user who initaite the delete, email2 of the user who user is going to delete
          required: true
          schema:
            type: object
            required:
              - email1
              - email2
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: successfully deleted contact
          schema:
            type: array
            items:
              properties:
                name:
                  type: string
                profile_picture:
                  type: string
                lastInteractTime:
                  type: string
        404:
          description: user not found
  /suggestion/:{email}:
    get:
      tags:
        - "Contact"
      description: get list of suggested contacts
      produces:
        - application/json
      parameters:
        - in: path
          name: email
          description: user email
          required: true
          type: string
      responses:
        200:
          description: successfully suggested contacts
          schema:
            type: array
            items:
              properties:
                name:
                  type: string
                profile_picture:
                  type: string
                email:
                  type: string
        404:
          description: No suggestion found
          
  /allusers:
    get:
      tags:
        - "Contact"
      description: get a list of all registered users
      produces:
        - application/json
      responses:
        200:
          description: successfully get all the users
          schema:
            type: array
            items:
              properties:
                name:
                  type: string
                profile_picture:
                  type: string
                email:
                  type: string

  /messages/:{pairId}:
    get:
      tags:
        - "Chat"
      description: get list of messages for the specified pairId
      produces:
        - application/json
      parameters:
        - in: path
          name: pairId
          description: unique id between pair of users
          required: true
          type: string
      responses:
        200:
          description: successfully get the messages
          schema:
            type: array
            items:
              properties:
                pairId:
                  type: string
                from:
                  type: string
                to:
                  type: string
                message:
                  type: string
                datetime:
                  type: string
        404:
          description: error getting messages

  /message:
    post:
      tags:
        - "Chat"
      description: post a new message, store the message in db and update last interact time accordingly
      produces:
        - application/json
      parameters:
        - in: body
          name: pairId, from, to, message, type
          description: identifiers of the two users sending the message, message content and messgae type
          required: true
          schema:
            type: object
            required:
              - pairId
              - from
              - to
              - message
              - type
            properties:
              pairId:
                type: string
              from:
                type: string
              to:
                type: string
              message:
                type: string
              type:
                type: string
      responses:
        200:
          description: message saved
          schema:
            type: object
            properties:
              message:
                type: string
        400:
          description: receiver does not exist or is not a contact with sender/sender does not exist or is not a contact with receiver
          
  /message/uploadfiles:
    post:
      tags:
        - "Chat"
      description: post a new message with file (image, video, audio) upload, store the message in db and update last interact time accordingly
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file
          description: file (image, video, audio) to upload
          required: true
          type: file
        - in: formData
          name: pairId
          # from, to, message, type
          description: identifiers of the two users sending the message, message content and messgae type
          required: true
          type: string
        - in: formData
          name: to 
          # from, to, message, type
          description: identifiers of the two users sending the message, message content and messgae type
          required: true
          type: string
        - in: formData
          name: message 
          # from, to, message, type
          description: identifiers of the two users sending the message, message content and messgae type
          required: true
          type: string
        - in: formData
          name: type 
          # from, to, message, type
          description: identifiers of the two users sending the message, message content and messgae type
          required: true
          type: string
          # schema:
          #   type: object
          #   required:
          #     - pairId
          #     - from
          #     - to
          #     - message
          #     - type
          #   properties:
          #     pairId:
          #       type: string
          #     from:
          #       type: string
          #     to:
          #       type: string
          #     message:
          #       type: string
          #     type:
          #       type: string
      responses:
        200:
          description: Message saved
          schema:
            type: object
            properties:
              savedMessage:
                type: object
        400:
          description: No file upload /  receiver does not exist or is not a contact with sender/sender does not exist or is not a contact with receiver
        500:
          description: Network error

  /status/:{email}:
    get:
      tags:
        - "Status"
      description: get user status who is identified by email
      produces:
        - application/json
      parameters:
        - in: path
          name: email
          description: user email
          required: true
          type: string
      responses:
        200:
          description: successfully found and return a list of status of the user
        404:
          description: user not found   
  
  /status/seen/:{email}/:{id}:
    post:
      tags:
        - "Status"
      description: update the list of user status user has seen
      produces:
        - application/json
      parameters:
        - in: path
          name: email
          description: user email and id
          required: true
          type: string
        - in: path
          name: id
          description: user email and id
          required: true
          type: string
      responses:
        200:
          description: successfully updated user status seen list
        404:
          description: user not found
          
  /video/token:
    get:
      tags:
        - "videoChat"
      description: get token from twilio
      produces:
        - application/json
      parameters:
        - in: body
          name: identity,room
          description: unique room for the two users
          required: true
          schema:
            type: object
            required:
              - identity
              - room
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: successfully get token
          schema:
            type: object
            properties:
              token:
                type: string
          
          
definitions:
  User:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
        format: password
      question:
        type: string
      answer:
        type: string
      failed_login_time:
        type: string
        format: date-time
      date:
        type: string
        format: date
      contacts:
        type: array
        items:
          type: object
          properties:
            pairId:
              type: string
            email:
              type: string
            lastInteractionTime:
              type: string
              format: date-time
      status:
        type: array
        items:
          type: object
          properties:
            statusId:
              type: string
            image:
              type: string
            text:
              type: string
            time:
              type: string
              format: date-time
      seen:
        type: array
        items:
          type: string